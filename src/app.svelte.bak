<script lang="ts">
  import { Router, Route } from 'svelte-routing';
  import { Layout, Popup } from './components';
  import type { Plugin, PluginNavItem } from './types';
  import {
    Login,
    P404,
    SignupAdmin,
    Overview,
    TemplateManager,
    GroupManager,
    WidgetManager,
    LanguageManager,
    UserManager,
    ApiKeyManager,
    MediaManager,
    EntryOverview,
    EntryEditor,
  } from './views';
  /*%PLUGINS_START%*/
import MyAwesomePlugin from '/home/banez/Documents/becomes/cms/v2/bundler/plugins/my-awesome-plugin/frontend/main.svelte';
const plugins = [
          {
            originalName: 'my-awesome-plugin',
            component: MyAwesomePlugin,
            displayName: 'My Awesome Plugin',
            path: 'my-awesome-plugin',
            icon: '/assets/default_plugin.svg',
          }
          ];
/*%PLUGINS_END%*/

  export let url = '';
  export let globalProps: {} = {};

  type RouteDescriptor = {
    path: string;
    component: any;
    props?: any;
    children?: RouteDescriptor[];
  }

  const pluginNavItems: PluginNavItem[] = plugins.map((plugin) => {
    return {
      name: plugin.displayName,
      icon: plugin.icon,
      link: '/dashboard/plugin/' + plugin.path,
    };
  });
  const routes = reduceRoutes([
    {
      path: `/`,
      component: Login,
    },
    {
      path: `/login`,
      component: Login,
    },
    {
      path: `/signup-admin`,
      component: SignupAdmin,
    },
    {
      path: `/dashboard`,
      component: Overview,
      children: [
        {
          path: '/template/editor/:id',
          component: TemplateManager,
        },
        {
          path: '/group/editor/:id',
          component: GroupManager,
        },
        {
          path: '/widget/editor/:id',
          component: WidgetManager,
        },
        {
          path: '/language/editor/:id',
          component: LanguageManager,
        },
        {
          path: '/user/editor/:id',
          component: UserManager,
        },
        {
          path: '/key/editor/:id',
          component: ApiKeyManager,
        },
        {
          path: '/media/editor',
          component: MediaManager,
        },
        {
          path: '/template/:templateId/entry',
          component: EntryOverview,
          children: [
            {
              path: '/:entryId',
              component: EntryEditor,
            },
          ],
        },
      ],
    },
    /*%ROUTER_PLUGINS_START*/
    /*%ROUTER_PLUGINS_END*/
    ...plugins.map((plugin) => {
      return {
        path: '/plugin' + plugin.path,
        component: plugin.component,
        props: {
          plugin: {
            name: plugin.displayName,
            icon: plugin.icon,
            props: (plugin as any).props,
          },
        },
      };
    }),
    {
      path: ``,
      component: P404,
    },
  ]);

  function reduceRoutes(rots: RouteDescriptor[]) {
    const output: Array<{
      path: string;
      component: any;
      props?: any;
    }> = [];
    for (const i in rots) {
      const rot = rots[i];
      output.push({
        path: rot.path,
        component: rot.component,
        props: rot.props,
      });
      if (rot.children) {
        const children = reduceRoutes(rot.children);
        for (const j in children) {
          children[j].path = rot.path + children[j].path;
          children[j].props = { ...children[j].props, ...rot.props };
          output.push(children[j]);
        }
      }
    }
    return output;
  }
</script>

<style global lang="scss">
  @import './styles/main.scss';
</style>

<Router {url}>
  <Layout {pluginNavItems}>
    {#each routes as route}
      <Route
        path={route.path}
        component={route.component}
        props={{ ...globalProps, ...route.props }} />
    {/each}
  </Layout>
</Router>
<Popup />
